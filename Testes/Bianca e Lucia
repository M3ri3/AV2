'''
Organização:
1. Código geral coemantado:
        - Compreender todas as partes.
2. Pensar em ideias para a implementação da classe Chuva.
3. Implementar a classe Chuva em Agent.
4. Implementar o Model da classe Chuva e garantir que todo o prijeto da chuva corre bem.
5. Trabalhar em outra coisa.
'''


#CÓDIGO FOREST_FIRE:

#agent
import mesa
import math


class TreeCell(mesa.Agent):
    """
    A tree in the forest.
    """

    def __init__(self, pos, model, prob_de_sobrevivencia):
        super().__init__(pos, model)
      w  self.pos = pos
        self.model = model
        self.condition = "Fine"  # Possíveis condições: "Fine", "On Fire", "Burned Out"
        self.prob_de_sobrevivencia = prob_de_sobrevivencia

    def step(self):
        # Apenas espalha fogo se a árvore está pegando fogo
        if self.condition == "On Fire":
            print(f"Tree at {self.pos} is on fire, spreading fire to neighbors...")
            for neighbor in self.model.grid.get_neighbors(self.pos, moore=True, include_center=False):
                if neighbor.condition == "Fine":
                    print(f"Checking tree at {neighbor.pos} with survival probability {neighbor.prob_de_sobrevivencia}")
                    random_value = self.random.random()
                    print(f"Generated random value: {random_value}")

                    # Se a probabilidade de sobrevivência for 1, a árvore não queima
                    if neighbor.prob_de_sobrevivencia == 1:
                        print(f"Tree at {neighbor.pos} has a survival probability of 1, it will not burn.")
                    # Se o valor aleatório for menor que a probabilidade de sobrevivência, a árvore sobrevive
                    elif random_value < neighbor.prob_de_sobrevivencia:
                        print(f"Tree at {neighbor.pos} survived the fire.")
                    else:
                        print(f"Tree at {neighbor.pos} burned due to random value exceeding survival probability.")
                        neighbor.condition = "On Fire"
            self.condition = "Burned Out"
        else:
            print(f"Tree at {self.pos} is in state: {self.condition}")

    def in_bounds(self, pos): #ADICIONAR COMENTARIO DO PQ DESSA FUNÇÃO
        x, y = pos
        # Verificar se as coordenadas estão dentro dos limites da grade
        return 0 <= x < self.model.grid.width and 0 <= y < self.model.grid.height




class CityCell(mesa.Agent):
    """
    A city in the forest.
    """

    def __init__(self, pos, model, condition = "City"):
        super().__init__(pos, model)
        self.pos = pos
        self.condition = "City"  # Condições possíveis: "City", "Evacuated"
        self.alert = False  # Flag para indicar o alerta de evacuação

    def step(self):
        # Alerta de evacuação para as cidades dentro do raio de 10 células
        if self.condition == "City":
            for x in range(self.pos[0] - 10, self.pos[0] + 11):
                for y in range(self.pos[1] - 10, self.pos[1] + 11):
                    # Ignorar a célula da cidade ou fora dos limites
                    if (x, y) == self.pos or not (0 <= x < self.model.grid.width and 0 <= y < self.model.grid.height):
                        continue
                    # Calcular a distância entre as células
                    distance = math.sqrt((self.pos[0] - x) ** 2 + (self.pos[1] - y) ** 2)
                    # Se o fogo está dentro do raio e encontrou uma célula em chamas, evacuar
                    if distance <= 10:
                        neighbor = self.model.grid.get_cell_list_contents([(x, y)])
                        for n in neighbor:
                            if n.condition == "On Fire":
                                self.alert = True
                                self.condition = "Evacuated"  # Evacuar a cidade
                                return

    def in_bounds(self, pos):
        x, y = pos
        # Verificar se as coordenadas estão dentro dos limites da grade
        return 0 <= x < self.model.grid.width and 0 <= y < self.model.grid.height


#model
import mesa
import math
from agent import TreeCell, CityCell  # Importando as classes TreeCell e CityCell


class ForestFire(mesa.Model):
    """
    Modelo de incêndio florestal com árvores e cidades.
    """

    def __init__(self, width=100, height=100, density=0.65, prob_de_sobrevivencia=0.0, city_probability=0.01):
        """
        Cria um novo modelo de incêndio florestal com árvores e cidades.

        Args:
            width, height: O tamanho da grade para modelar
            density: A fração de células com árvores
            prob_de_sobrevivencia: A probabilidade de uma árvore sobreviver ao fogo
            city_probability: A probabilidade de uma célula ser uma cidade
        """
        super().__init__()

        # Configura objetos do modelo
        self.schedule = mesa.time.RandomActivation(self)
        self.grid = mesa.space.MultiGrid(width, height, torus=False)
        self.prob_de_sobrevivencia = prob_de_sobrevivencia  # Probabilidade de sobrevivência das árvores

        self.datacollector = mesa.DataCollector(
            {
                "Fine": lambda m: self.count_type(m, "Fine"),
                "On Fire": lambda m: self.count_type(m, "On Fire"),
                "Burned Out": lambda m: self.count_type(m, "Burned Out"),
                "Cities Evacuated": lambda m: self.count_type(m, "Evacuated"),  # Contando cidades evacuadas
            }
        )

        # Coloca árvores e cidades nas células
        for contents, (x, y) in self.grid.coord_iter():
            if self.random.random() < density:
                # Cria uma árvore com a probabilidade de sobrevivência
                new_tree = TreeCell((x, y), self, self.prob_de_sobrevivencia)
                # Define todas as árvores da primeira coluna como "On Fire"
                if x == 0:
                    new_tree.condition = "On Fire"
                self.grid.place_agent(new_tree, (x, y))
                self.schedule.add(new_tree)

            # Cria cidades com base na probabilidade
            elif self.random.random() < city_probability:
                city = CityCell((x, y), self)
                self.grid.place_agent(city, (x, y))
                self.schedule.add(city)

        self.running = True
        self.datacollector.collect(self)

    def step(self):
        """
        Avança o modelo por um passo.
        """
        self.schedule.step()
        # Coleta dados
        self.datacollector.collect(self)

        # Interrompe se não houver mais fogo
        if self.count_type(self, "On Fire") == 0:
            self.running = False

    @staticmethod
    def count_type(model, condition):
        """
        Método auxiliar para contar agentes em uma dada condição no modelo.
        """
        count = 0
        for agent in model.schedule.agents:
            if isinstance(agent, TreeCell) and agent.condition == condition:
                count += 1
            elif isinstance(agent, CityCell) and agent.condition == condition:
                count += 1
        return count

#server
import mesa
from agent import TreeCell, CityCell  # Adicione CityCell na importação
from model import ForestFire  # Certifique-se de importar o modelo correto

# Definindo as cores para as condições das células
COLORS = {
    "Fine": "#00AA00",        # Verde para árvores saudáveis
    "On Fire": "#880000",     # Vermelho para árvores em chamas
    "Burned Out": "#000000",  # Preto para árvores queimadas
    "City": "#0000FF",        # Azul para as cidades
    "Evacuated": "#FFFF00"    # Amarelo para cidades em evacuação
}

def forest_fire_portrayal(cell):
    """
    Define como cada célula deve ser representada visualmente.
    """
    if cell is None:
        return

    portrayal = {"Shape": "rect", "Filled": "true", "Layer": 0}
    (x, y) = cell.pos
    portrayal["x"] = x
    portrayal["y"] = y

    # Ajuste para o tamanho da célula dependendo da condição (cidade é 5x5)
    if isinstance(cell, CityCell):  # Verificando se é uma cidade
        portrayal["w"] = 5
        portrayal["h"] = 5
    else:  # Para as árvores
        portrayal["w"] = 1
        portrayal["h"] = 1

    portrayal["Color"] = COLORS[cell.condition]  # A cor da célula depende da sua condição
    return portrayal

# Gráfico de barras para mostrar as quantidades de árvores em cada estado
tree_chart = mesa.visualization.ChartModule(
    [{"Label": label, "Color": color} for label, color in COLORS.items() if label != "City" and label != "Evacuated"]
)

# Gráfico de pizza para a distribuição das árvores
pie_chart = mesa.visualization.PieChartModule(
    [{"Label": label, "Color": color} for label, color in COLORS.items() if label != "City" and label != "Evacuated"]
)

# Parâmetros do modelo: dimensões da grade, densidade das árvores e probabilidade das cidades
model_params = {
    "height": 100,
    "width": 100,
    "density": mesa.visualization.Slider("Tree density", 0.65, 0.01, 1.0, 0.01),
    "city_probability": mesa.visualization.Slider("City Probability", 0.01, 0.0001, 0.05, 0.0001),
    "prob_de_sobrevivencia": mesa.visualization.Slider("Survival Probability", 0.5, 0.01, 1.0, 0.01)
}


# Definindo o Canvas para a visualização do modelo
canvas_element = mesa.visualization.CanvasGrid(
    forest_fire_portrayal, 100, 100, 500, 500
)

# Inicializando o servidor com o modelo, a visualização e os parâmetros
server = mesa.visualization.ModularServer(
    ForestFire, [canvas_element, tree_chart, pie_chart], "Forest Fire with Cities and Evacuation", model_params
)

# Configurando a porta para o servidor
server.port = 8521
server.launch()


#NOSSO CÓDIGO (CLASSE CHUVA):

'''
No fim, após uma análise sobre a classe Chuva, solicitada pela Maria concluimos que é mais proveitoso trabalhar com uma classe Tempo, que seja responsável pelo clima.
Nossa Classe Tempo terá informações sobre informações sobre temperatura, precipitação, pressão atmosférica e umidade.
'''

import random

class Tempo: #classe que representa o tempo na região do modelo. 
    
    def __init__(self, temperatura_media=26.0, umidade_media=80.0, pressao_media=1013.25, precipitacao_media=5.0):
        """
        inicializa o clima com valores médios de temperatura, umidade, pressão e precipitação.
        
        - para temperatura_media: Temperatura média de uma floresta tropical em graus Celsius.
        - para umidade_media: Umidade relativa média de uma floresta tropical em percentual.
        - para pressao_media: Pressão atmosférica média de uma floresta tropical em hPa.
        - para precipitacao_media: Precipitação média diária de uma floresta tropical em mm.
        """
        self.temperatura = temperatura_media
        self.umidade = umidade_media
        self.pressao = pressao_media
        self.precipitacao = precipitacao_media

    def atualizar_clima(self):
        #temperatura com variação aleatória entre -2 e 2 graus
        self.temperatura += random.uniform(-2.0, 2.0)
        
        #umidade com variação aleatória entre -5% e 5%
        self.umidade += random.uniform(-5.0, 5.0)
        self.umidade = max(0, min(100, self.umidade))
        
        #pressão  com variação aleatória entre -5 e 5 hPa
        self.pressao += random.uniform(-5.0, 5.0)
        self.pressao = max(900, min(1050, self.pressao))
        
        #precipitação
        self.precipitacao = random.uniform(0.0, 15.0) if random.random() < 0.50 else 0.0
